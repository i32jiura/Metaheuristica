/* 
 * File:   SolGenerator.hpp
 * Author: jesus
 *
 * Created on 4 de marzo de 2016, 19:14
 */

#ifndef SOLGENERATOR_HPP
#define	SOLGENERATOR_HPP

#include "Solucion.hpp"
#include "InstanceTsp.hpp"
#include "TrajectorySearch.hpp"
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iostream>


class TrajectorySearchTSP : public TrajectorySearch {
private:
	InstanceTSP _instance;
public:
	
	TrajectorySearchTSP(const InstanceTSP orig){_instance=orig;}
	
	 void SetInstance(InstanceTSP _instance)
	{
		this->_instance = _instance;
	}

	//observador referencia no constante
	InstanceTSP& GetInstance()
	{
		return _instance;
	}

	//observador referencia constante
	const InstanceTSP& GetInstance() const
	{
		return _instance;
	}

	Solucion Neighoperator() { 
			
		Solucion generic(GetSol());
		int tam=generic.GetValores().size();
		int pos1=(rand()%(tam-2))+1;
		int pos2=(rand()%(tam-2))+1;
               
			generic.SetCoste(generic.GetCoste() - (_instance.getMatDist()[generic.GetValores()[pos1]][generic.GetValores()[pos1-1]]+_instance.getMatDist()[generic.GetValores()[pos1]][generic.GetValores()[pos1+1]]+
                                _instance.getMatDist()[generic.GetValores()[pos2]][generic.GetValores()[pos2-1]]+_instance.getMatDist()[generic.GetValores()[pos2]][generic.GetValores()[pos2+1]]));
			//HASTA AQUI LA RESTA
			int aux=generic.GetValores()[pos1];
			generic.GetValores()[pos1]=generic.GetValores()[pos2];
			generic.GetValores()[pos2]=aux;
			//AQUI LA SUMA
			generic.SetCoste(generic.GetCoste() + (_instance.getMatDist()[generic.GetValores()[pos1]][generic.GetValores()[pos1-1]]+_instance.getMatDist()[generic.GetValores()[pos1]][generic.GetValores()[pos1+1]]+
                                _instance.getMatDist()[generic.GetValores()[pos2]][generic.GetValores()[pos2-1]]+_instance.getMatDist()[generic.GetValores()[pos2]][generic.GetValores()[pos2+1]]));
	
		return generic;
	}
	
	void firstImprovement(int kNeigh){
		
		//KNeigh es la amplitud del intervalo de busqueda
		bool seguir = true;
		Solucion s1, s2;

			// Recorre todos los vecinos hasta la soluci√≥n final
			while(seguir)
			{
				s2 = GetSol();
				// Sale de aqui cuando no se hacen mas mejoras por vecindario
				seguir = false;
				
				// Recorro el vecindario y salgo cuando encuentro una mejor
				for(unsigned int i = 0; i<kNeigh; i++)
				{
					// genero una nueva solucion y compruebo su coste
					s1 = Neighoperator();

					if(s1.GetCoste() < s2.GetCoste())
					{
						// Aqui cambio si es mejor y salgo
						SetSol(s1);
						seguir=true;

						break;
					}
				}

			}
		}
		
	void bestImprovement(int kNeigh){
		
		Solucion sB,sP;
		bool seguir = true;

		
			while(seguir) 
			{			
				seguir = false;
				sB = GetSol();
				
				for(int i=0;i<kNeigh;i++) 
				{	
					sP = this->Neighoperator();	
					
					if(sP.GetCoste() < sB.GetCoste())
					{
						sB = sP;
					}
					
				}
				//calCost(sB,_instance.getPuntos());
				if(sB.GetCoste() < GetSol().GetCoste())
				{
					
					SetSol(sB);
					seguir = true;
				}
				
			}
		}

	void getValidSolution(Solucion & generic, std::vector<coordenadas> &puntos){
            int indice1,indice2,aux;
            
			
            indice1 = rand()%puntos.size();
            indice2 = rand()%puntos.size();
            
            while(indice1 == indice2){
                indice2 = rand()%puntos.size();
            }
            
            aux = generic.GetValores()[indice1];
            generic.GetValores()[indice1] = generic.GetValores()[indice2];
            generic.GetValores()[indice2] = aux;
			
			calCost(generic,puntos);
		
	}
        
    //protected: 
        void calCost(Solucion &generic, std::vector<coordenadas> &puntos){
			double coste = 0.0;
			
			for(int i = 0;i < generic.GetValores().size()-1; i++){
				coste += euclidean(generic.GetValores()[i],generic.GetValores()[i+1]);
			}
			
			generic.SetCoste(coste);
			
		}
		double euclidean(const int & p1,const int & p2){
			return _instance.getMatDist()[p1][p2];
		}
};

#endif	/* SOLGENERATOR_HPP */

