/* 
 * File:   SolGenerator.hpp
 * Author: jesus
 *
 * Created on 4 de marzo de 2016, 19:14
 */

#ifndef SOLGENERATOR_HPP
#define	SOLGENERATOR_HPP

#include "Solucion.hpp"
#include "InstanceTsp.hpp"
#include "LocalSearch.hpp"
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>


class L_S_Tsp : public LocalSearch {
private:
	InstanceTSP _instance;
public:
	
	L_S_Tsp(const InstanceTSP orig){_instance=orig;}
	
	 void SetInstance(InstanceTSP _instance)
	{
		this->_instance = _instance;
	}

	//observador referencia no constante
	InstanceTSP& GetInstance()
	{
		return _instance;
	}

	//observador referencia constante
	const InstanceTSP& GetInstance() const
	{
		return _instance;
	}

	Solucion Neighoperator(const int & pos) { 
			
		Solucion generic(GetSol());
		int tam=generic.GetValores().size();
		if(pos>=tam){
			int aux=generic.GetValores()[pos-tam];
			generic.GetValores()[pos-tam]=generic.GetValores()[pos-tam+1];
			generic.GetValores()[pos-tam+1]=aux;				
		}else{
			int aux=generic.GetValores()[pos];
			generic.GetValores()[pos]=generic.GetValores()[pos+1];
			generic.GetValores()[pos+1]=aux;	
		}
		return generic;
	}
	
		void firstImprovement(int kNeigh){
		
		//KNeigh es la amplitud del intervalo de busqueda
		bool seguir = true;
		bool salir;
		
			// Recorre todos los vecinos hasta la soluciÃ³n final
			while(seguir)
			{
				Solucion s2 = this->GetSol();
				// Sale de aqui cuando no se hacen mas mejoras por vecindario
				salir = false;
			
				// Recorro el vecindario y salgo cuando encuentro una mejor
				for(unsigned int i = 0; i<kNeigh && !salir; i++)
				{
					// genero una nueva solucion y compruebo su coste
					Solucion s1 = Neighoperator(i);
					if(s1.GetCoste() < s2.GetCoste())
					{
						// Aqui cambio si es mejor y salgo
						this->SetSol(s1);
						salir = true;
					}
				}
			
				// Salgo del while si no encuentra ninguna mejor en todo el vecindario
				seguir = false;
			}
		}
		
		void bestImprovement(int kNeigh){
		
		Solucion sB,sP;
		bool seguir = true;
		int mejorCambio;
			
			while(seguir) 
			{			
				seguir = false;
				mejorCambio = 0;
				sB = this->GetSol();
				
				for(int i=0;i<kNeigh;i++) 
				{	
					sP = this->Neighoperator(i);
					calCost(sP,this->GetInstance().getPuntos());	
					
					if(sP.GetCoste() < sB.GetCoste())
					{
						sB = sP;
						mejorCambio = i;
					}
					
				}
				
				if(sB.GetCoste() < this->GetSol().GetCoste())
				{
					this->SetSol(this->Neighoperator(mejorCambio));
					this->calCost(this->GetSol(),this->GetInstance().getPuntos());
					seguir = true;
				}
				
			}
		}

	void getValidSolution(Solucion & generic, std::vector<coordenadas> &puntos){
            int indice1,indice2,aux;
            
			
            indice1 = rand()%puntos.size();
            indice2 = rand()%puntos.size();
            
            while(indice1 == indice2){
                indice2 = rand()%puntos.size();
            }
            
            aux = generic.GetValores()[indice1];
            generic.GetValores()[indice1] = generic.GetValores()[indice2];
            generic.GetValores()[indice2] = aux;
			
			//calCost(generic,puntos);
		
	}
        
    //protected: 
        void calCost(Solucion &generic, std::vector<coordenadas> &puntos){
			double coste = 0.0;
			
			for(int i = 0;i < generic.GetValores().size()-1; i++){
				coste += euclidean(puntos[generic.GetValores()[i]],puntos[generic.GetValores()[i+1]]);
			}
			
			generic.SetCoste(coste);
			
		}
		double euclidean(coordenadas & p1,coordenadas & p2){
			return std::sqrt((pow(((double) p1.x-p2.x),2))+(pow(((double) p1.y-p2.y),2)));
		}
};

#endif	/* SOLGENERATOR_HPP */

